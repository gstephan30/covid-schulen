select(bl_name, data_date, contains("teacher"), -teacher_perc, -label_teacher) %>%
mutate_if(is.numeric, ~round(., 4)) %>%
set_names("Bundesland", "Woche", "Infizierte Lehrkräfte", "Infizierte Lehrkräfte in %",
"Lehrkräfte in Quaratäne", "Lehrkräfte in Quaratäne in %", "Gesamte Lehrkräfte") %>%
DT::datatable(options = list(pageLength = 16, dom = 'tip'))
kpi_bl
kpi_bl %>%
select(bl_name, data_date, contains("teacher"), -teacher_perc, -label_teacher)
kpi_bl %>%
select(bl_name, data_date, contains("teacher"), -teacher_perc)
tab_teacher <- kpi_bl %>%
select(bl_name, data_date, contains("teacher"), -teacher_perc) %>%
mutate_if(is.numeric, ~round(., 4)) %>%
set_names("Bundesland", "Woche", "Infizierte Lehrkräfte", "Infizierte Lehrkräfte in %",
"Lehrkräfte in Quaratäne", "Lehrkräfte in Quaratäne in %", "Gesamte Lehrkräfte") %>%
DT::datatable(options = list(pageLength = 16, dom = 'tip'))
tab_teacher
tab_students <- kpi_bl %>%
tab_teacher <- kpi_bl %>%
tab_teacher <- kpi_bl %>%
select(bl_name, data_date, contains("teacher"), -teacher_perc) %>%
mutate_if(is.numeric, ~round(., 4)) %>%
set_names("Bundesland", "Woche", "Infizierte Lehrkräfte", "Infizierte Lehrkräfte in %",
"Lehrkräfte in Quaratäne", "Lehrkräfte in Quaratäne in %", "Gesamte Lehrkräfte") %>%
DT::datatable(options = list(pageLength = 16,
dom = 'Bfrtip',
buttons = c('csv', 'excel')))
tab_teacher
tab_teacher <- kpi_bl %>%
select(bl_name, data_date, contains("teacher"), -teacher_perc) %>%
mutate_if(is.numeric, ~round(., 4)) %>%
set_names("Bundesland", "Woche", "Infizierte Lehrkräfte", "Infizierte Lehrkräfte in %",
"Lehrkräfte in Quaratäne", "Lehrkräfte in Quaratäne in %", "Gesamte Lehrkräfte") %>%
DT::datatable(extensions = 'Buttons', options = list(pageLength = 16,
dom = 'Bfrtip',
buttons = c('csv', 'excel')))
kpi_bl %>%
select(bl_name, data_date, contains("students"), -students_perc) %>%
filter(!is.na(bl_name)) %>%
mutate_if(is.numeric, ~round(., 4)) %>%
set_names("Bundesland", "Woche", "Infizierte Schüler", "Infizierte Schüler in %",
"Schüler in Quaratäne", "Schüler in Quaratäne in %", "Gesamte Schüler") %>%
DT::datatable(extensions = 'Buttons', options = list(pageLength = 16,
dom = 'Bfrtip',
buttons = c('csv', 'excel')))
tab_students <- kpi_bl %>%
select(bl_name, data_date, contains("students"), -students_perc) %>%
filter(!is.na(bl_name)) %>%
mutate_if(is.numeric, ~round(., 4)) %>%
set_names("Bundesland", "Woche", "Infizierte Schüler", "Infizierte Schüler in %",
"Schüler in Quaratäne", "Schüler in Quaratäne in %", "Gesamte Schüler") %>%
DT::datatable(extensions = 'Buttons', options = list(pageLength = 16,
dom = 'Bfrtip',
buttons = c('csv', 'excel')))
tab_teacher <- kpi_bl %>%
select(bl_name, data_date, contains("teacher"), -teacher_perc) %>%
mutate_if(is.numeric, ~round(., 4)) %>%
set_names("Bundesland", "Woche", "Infizierte Lehrkräfte", "Infizierte Lehrkräfte in %",
"Lehrkräfte in Quaratäne", "Lehrkräfte in Quaratäne in %", "Gesamte Lehrkräfte") %>%
DT::datatable(extensions = 'Buttons', options = list(pageLength = 16,
dom = 'Bfrtip',
buttons = c('csv', 'excel')))
save(tab_students, tab_teacher, file = "data_clean/current_tabs.RData")
library(dplyr)
library(stringr)
library(lubridate)
library(tidyr)
library(leaflet)
library(leaflet.extras)
library(leafpop)
library(htmltools)
library(htmlwidgets)
kpi_kreis <- list.files(path = "data_clean/", pattern = "clean_kpi_bl", full.names = TRUE) %>%
as_tibble() %>%
rename(file = value) %>%
mutate(datum = str_extract(file, "[0-9]{8}"),
datum = ymd(datum)) %>%
arrange(desc(datum)) %>%
pull(file) %>%
.[1] %>%
readRDS()
quara <- kpi_kreis %>%
filter(year(data_date) == 2021) %>%
pivot_wider(
names_from = "category",
values_from = "value",
values_fill = 0
) %>%
separate(key, c("bl", "bl2"), remove = FALSE) %>%
select(data_date, key, bl, bl2, date, contains("quara")) %>%
mutate(students_quarantine_perc = ifelse(is.nan(students_quarantine_perc), NA, students_quarantine_perc),
teacher_quarantine_perc = ifelse(is.nan(teacher_quarantine_perc), NA, teacher_quarantine_perc),
HASC_1 = paste0("DE.", toupper(bl2)))
bl.shp <- raster::getData("GADM", country = "DEU", level = 1)
bl_tidy <- bl.shp%>%
broom::tidy(region = "CC_1")
kmk_data <- bl.shp
kmk_data@data <- bl.shp@data %>%
as_tibble() %>%
left_join(quara %>%
filter(data_date == max(data_date)),
by = "HASC_1") %>%
mutate(label = paste0(NAME_1, "\nSchüler in Quarantäne: ", round(students_quarantine_perc, 4), "%"),
label = ifelse(grepl("NA%$", label),
paste0(NAME_1, " - Schule geschlossen\noder keine Daten vorhanden"),
label),
label_teacher = paste0(NAME_1, "\nLehrkräfte in Quarantäne: ", round(teacher_quarantine_perc, 4), "%"),
label_teacher = ifelse(grepl("NA%$", label_teacher),
paste0(NAME_1, " - Schule geschlossen\noder keine Daten vorhanden"),
label_teacher))
heute_str <- gsub("-", "", Sys.Date())
saveRDS(kmk_data@data, file = paste0("data_clean/", heute_str, "_kmkdata_bl_quara.rds"))
#####################################################################################
#### students
pal <- colorNumeric(
palette = "viridis",
domain = kmk_data@data$students_quarantine_perc,
na.color = "#ffffff")
## create javascript elements for plot
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title_string_new <- paste0(
'KMK Dashboard - Infected students
</br> Stand ',
format(Sys.Date(), "%d/%m%/%Y")
)
title <- tags$div(
tag.map.title, HTML(title_string_new)
)
pall <- colorNumeric(
palette = "viridis",
domain = kmk_data$students_quarantine_perc[!is.na(kmk_data$students_quarantine_perc)]
)
kmk_students_bl_quara <- leaflet(options = leafletOptions(
zoomControl = FALSE,
minZoom = 6.2,
maxZoom = 9
)) %>%
addPolygons(
data = kmk_data,
#label = ~map(label_map, HTML),
popup = ~label,
smoothFactor = 0.000005,
opacity = 1,
fillColor = ~pal(students_quarantine_perc),
color = '#cccccc',
weight = 1,
fillOpacity = 1,
highlightOptions = highlightOptions(
color = "#D23264",
weight = 3,
stroke = 4,
bringToFront = TRUE,
sendToBack = FALSE
)
) %>%
setMapWidgetStyle(list(background= "white")) %>%
#addControl(title, position = "topleft", className="map-title") %>%
addLegend(position = "bottomright",
pal = pall,
values = kmk_data$students_quarantine_perc[!is.na(kmk_data$students_quarantine_perc)],
title = "Schüler in Quaratäne in %", na.label="")
#####################################################################################
#### teacher
pal <- colorNumeric(
palette = "viridis",
domain = kmk_data@data$teacher_quarantine_perc,
na.color = "#ffffff")
## create javascript elements for plot
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title_string_new <- paste0(
'KMK Dashboard - Infected teacher
</br> Stand ',
format(Sys.Date(), "%d/%m%/%Y")
)
title <- tags$div(
tag.map.title, HTML(title_string_new)
)
pall <- colorNumeric(
palette = "viridis",
domain = kmk_data$teacher_quarantine_perc[!is.na(kmk_data$teacher_quarantine_perc)]
)
kmk_teacher_bl_quara <- leaflet(options = leafletOptions(
zoomControl = FALSE,
minZoom = 6.2,
maxZoom = 9
)) %>%
addPolygons(
data = kmk_data,
#label = ~map(label_map, HTML),
popup = ~label_teacher,
smoothFactor = 0.000005,
opacity = 1,
fillColor = ~pal(teacher_quarantine_perc),
color = '#cccccc',
weight = 1,
fillOpacity = 1,
highlightOptions = highlightOptions(
color = "#D23264",
weight = 3,
stroke = 4,
bringToFront = TRUE,
sendToBack = FALSE
)
) %>%
setMapWidgetStyle(list(background= "white")) %>%
#addControl(title, position = "topleft", className="map-title") %>%
addLegend(position = "bottomright",
pal = pall,
values = kmk_data$teacher_quarantine_perc[!is.na(kmk_data$teacher_quarantine_perc)],
title = "Infizierte Lehrkräfte\nin %", na.label="")
save(kmk_students_bl_quara, kmk_teacher_bl_quara, file = "leaflet_maps/recent_maps_bl_quara.RData")
forecast_students <- read_csv("data_clean/week40_student.csv")
forecast_teacher <- read_csv("data_clean/week40_teacher.csv")
time_kmk <- read_csv("data_clean/KMK_data.csv")
library(flexdashboard)
library(dplyr)
library(ggplot2)
library(lubridate)
library(emojifont)
library(leaflet)
library(readr)
library(tidyr)
library(stringr)
forecast_students <- read_csv("data_clean/week40_student.csv")
forecast_teacher <- read_csv("data_clean/week40_teacher.csv")
time_kmk <- read_csv("data_clean/KMK_data.csv")
data <- forecast_students
country_code <- "TH"
sub_set <- "student"
plot_data <- data %>%
mutate(key = paste0(type, "_", quantile)) %>%
select(target_week, location, key, value) %>%
filter(location == country_code) %>%
mutate(value = as.numeric(value)) %>%
pivot_wider(names_from = key, values_from = value) %>%
bind_rows(time_kmk %>%
filter(location == country_code) %>%
select(target_week = week,
location, point_NA = any_of(sub_set)) %>%
mutate(point_NA = ifelse(point_NA == "-", NA, point_NA),
point_NA = as.numeric(point_NA))) %>%
mutate(target_week = ifelse(nchar(target_week) == 1, paste0("0", target_week), target_week),
target_week = paste0("2021-KW", target_week))
data
forecast_students
list.files("data_clean/", pattern = "_student.csv|_teacher.csv")
list.files("data_clean/", pattern = "_student.csv|_teacher.csv") %>%
as_tibble()
list.files("data_clean/", pattern = "_student.csv|_teacher.csv") %>%
as_tibble() %>%
mutate(datum = str_extract(value, "[0-9]{8}"),
datum = ymd(datum)) %>%
arrange(desc(datum))
list.files("data_clean/", pattern = "_student.csv|_teacher.csv") %>%
as_tibble() %>%
arrange(desc(datum))
list.files("data_clean/", pattern = "_student.csv|_teacher.csv") %>%
as_tibble() %>%
arrange(desc(value))
list.files("data_clean/", pattern = "_student.csv|_teacher.csv") %>%
as_tibble() %>%
arrange(desc(value)) %>%
mutate(woche = str_extract(value, "[0-9]{2}"))
list.files("data_clean/", pattern = "_student.csv|_teacher.csv") %>%
as_tibble() %>%
arrange(desc(value)) %>%
mutate(woche = str_extract(value, "[0-9]{2}")) %>%
group_by(woche) %>%
slice(1)
list.files("data_clean/", pattern = "_student.csv|_teacher.csv") %>%
as_tibble() %>%
arrange(desc(value)) %>%
mutate(woche = str_extract(value, "[0-9]{2}")) %>%
group_by(woche)
list.files("data_clean/", pattern = "_student.csv|_teacher.csv") %>%
as_tibble() %>%
arrange(desc(value)) %>%
mutate(woche = str_extract(value, "[0-9]{2}")) %>%
group_by(woche) %>%
slice(1)
list.files("data_clean/", pattern = "_student.csv|_teacher.csv") %>%
as_tibble() %>%
mutate(woche = str_extract(value, "[0-9]{2}")) %>%
arrange(desc(woche))
list.files("data_clean/", pattern = "_student.csv|_teacher.csv") %>%
as_tibble() %>%
mutate(woche = str_extract(value, "[0-9]{2}")) %>%
arrange(desc(woche)) %>%
slice(1:2)
list.files("data_clean/", pattern = "_student.csv|_teacher.csv", full.names = TRUE) %>%
as_tibble() %>%
mutate(woche = str_extract(value, "[0-9]{2}")) %>%
arrange(desc(woche)) %>%
slice(1:2)
recent_forcasts <- list.files("data_clean/", pattern = "_student.csv|_teacher.csv", full.names = TRUE) %>%
as_tibble() %>%
mutate(woche = str_extract(value, "[0-9]{2}")) %>%
arrange(desc(woche)) %>%
slice(1:2) %>%
pull(value)
recent_forcasts
grep("student", recent_forcasts, value = TRUE)
forecast_students <- read_csv(grep("student", recent_forcasts, value = TRUE))
forecast_students
forecast_teacher <- read_csv(grep("teacher", recent_forcasts, value = TRUE))
forecast_teacher
data
data <- forecast_students
country_code <- "TH"
sub_set <- "student"
data %>%
mutate(key = paste0(type, "_", quantile))
plot_data <- data %>%
mutate(key = paste0(type, "_", quantile)) %>%
select(target_week, location, key, value) %>%
filter(location == country_code) %>%
mutate(value = as.numeric(value)) %>%
pivot_wider(names_from = key, values_from = value) %>%
bind_rows(time_kmk %>%
filter(location == country_code) %>%
select(target_week = week,
location, point_NA = any_of(sub_set)) %>%
mutate(point_NA = ifelse(point_NA == "-", NA, point_NA),
point_NA = as.numeric(point_NA))) %>%
mutate(target_week = ifelse(nchar(target_week) == 1, paste0("0", target_week), target_week),
target_week = paste0("2021-KW", target_week))
plot_data
data %>%
mutate(key = paste0(type, "_", quantile)) %>%
select(target_week, location, key, value)
data
data %>%
mutate(key = paste0(type, "_", quantile),
target_week = paste0(target_year, "-", target_week)) %>%
select(target_week, location, key, value)
data %>%
mutate(key = paste0(type, "_", quantile),
target_week = paste0(target_year, "-", target_week)) %>%
select(target_week, location, key, value) %>%
filter(location == country_code) %>%
mutate(value = as.numeric(value)) %>%
pivot_wider(names_from = key, values_from = value) %>%
bind_rows(time_kmk %>%
filter(location == country_code) %>%
select(target_week = week,
location, point_NA = any_of(sub_set)) %>%
mutate(point_NA = ifelse(point_NA == "-", NA, point_NA),
point_NA = as.numeric(point_NA))) %>%
mutate(target_week = ifelse(nchar(target_week) == 1, paste0("0", target_week), target_week))
data %>%
mutate(key = paste0(type, "_", quantile),
target_week = paste0(target_year, "-", target_week)) %>%
select(target_week, location, key, value) %>%
filter(location == country_code)
data %>%
mutate(key = paste0(type, "_", quantile),
target_week = paste0(target_year, "-", target_week)) %>%
select(target_week, location, key, value) %>%
filter(location == country_code) %>%
mutate(value = as.numeric(value))
data %>%
mutate(key = paste0(type, "_", quantile),
target_week = paste0(target_year, "-", target_week)) %>%
select(target_week, location, key, value) %>%
filter(location == country_code) %>%
mutate(value = as.numeric(value)) %>%
pivot_wider(names_from = key, values_from = value)
time_kmk
data
View(data)
data
data %>%
mutate(key = paste0(type, "_", quantile),
ind_week = nchar(target_week),
target_week = ifelse(ind_week == 1, paste0("0", target_week), as.character(target_week),
target_week = paste0(target_year, "-", target_week))
data %>%
mutate(key = paste0(type, "_", quantile),
ind_week = nchar(target_week),
target_week = ifelse(ind_week == 1, paste0("0", target_week), as.character(target_week)),
target_week = paste0(target_year, "-", target_week)) %>%
select(target_week, location, key, value)
time_kmk
ime_kmk %>%
filter(location == country_code) %>%
mutate(ind_week = nchar(week),
target_week = ifelse(ind_week == 1, paste0("0", target_week), as.character(target_week)))
time_kmk %>%
filter(location == country_code) %>%
mutate(ind_week = nchar(week),
target_week = ifelse(ind_week == 1, paste0("0", target_week), as.character(target_week)))
time_kmk %>%
filter(location == country_code) %>%
mutate(ind_week = nchar(week),
target_week = ifelse(ind_week == 1, paste0("0", week), as.character(week)))
time_kmk %>%
filter(location == country_code) %>%
mutate(ind_week = nchar(week),
target_week = ifelse(ind_week == 1, paste0("0", week), as.character(week)),
target_week = paste0(target_year, "-", target_week))
time_kmk %>%
filter(location == country_code) %>%
mutate(ind_week = nchar(week),
target_week = ifelse(ind_week == 1, paste0("0", week), as.character(week)),
target_week = paste0(year, "-", target_week))
time_kmk %>%
filter(location == country_code) %>%
mutate(ind_week = nchar(week),
target_week = ifelse(ind_week == 1, paste0("0", week), as.character(week)),
target_week = paste0(year, "-", target_week)) %>%
select(target_week,
location, point_NA = any_of(sub_set))
time_kmk %>%
filter(location == country_code) %>%
mutate(ind_week = nchar(week),
target_week = ifelse(ind_week == 1, paste0("0", week), as.character(week)),
target_week = paste0(year, "-", target_week)) %>%
select(target_week,
location, point_NA = any_of(sub_set)) %>%
mutate(point_NA = ifelse(point_NA == "-", NA, point_NA),
point_NA = as.numeric(point_NA)))
time_kmk %>%
filter(location == country_code) %>%
mutate(ind_week = nchar(week),
target_week = ifelse(ind_week == 1, paste0("0", week), as.character(week)),
target_week = paste0(year, "-", target_week)) %>%
select(target_week,
location, point_NA = any_of(sub_set)) %>%
mutate(point_NA = ifelse(point_NA == "-", NA, point_NA),
point_NA = as.numeric(point_NA))
data %>%
mutate(key = paste0(type, "_", quantile),
ind_week = nchar(target_week),
target_week = ifelse(ind_week == 1, paste0("0", target_week), as.character(target_week)),
target_week = paste0(target_year, "-", target_week)) %>%
select(target_week, location, key, value) %>%
filter(location == country_code) %>%
mutate(value = as.numeric(value)) %>%
pivot_wider(names_from = key, values_from = value) %>%
bind_rows(time_kmk %>%
filter(location == country_code) %>%
mutate(ind_week = nchar(week),
target_week = ifelse(ind_week == 1, paste0("0", week), as.character(week)),
target_week = paste0(year, "-", target_week)) %>%
select(target_week,
location, point_NA = any_of(sub_set)) %>%
mutate(point_NA = ifelse(point_NA == "-", NA, point_NA),
point_NA = as.numeric(point_NA)))
plot_data <- data %>%
mutate(key = paste0(type, "_", quantile),
ind_week = nchar(target_week),
target_week = ifelse(ind_week == 1, paste0("0", target_week), as.character(target_week)),
target_week = paste0(target_year, "-", target_week)) %>%
select(target_week, location, key, value) %>%
filter(location == country_code) %>%
mutate(value = as.numeric(value)) %>%
pivot_wider(names_from = key, values_from = value) %>%
bind_rows(time_kmk %>%
filter(location == country_code) %>%
mutate(ind_week = nchar(week),
target_week = ifelse(ind_week == 1, paste0("0", week), as.character(week)),
target_week = paste0(year, "-", target_week)) %>%
select(target_week,
location, point_NA = any_of(sub_set)) %>%
mutate(point_NA = ifelse(point_NA == "-", NA, point_NA),
point_NA = as.numeric(point_NA)))
x_axis <- sort(plot_data$target_week)
plot_data %>%
ggplot(aes(x = target_week, y = point_NA, group = 1)) +
geom_ribbon(
aes(ymin = quantile_0.025,
ymax = quantile_0.975),
alpha = 0.25,
fill = "#27408b"
) +
geom_ribbon(aes(ymin = quantile_0.25,
ymax = quantile_0.75),
alpha = 0.25,
fill = "#27408b") +
geom_point(color = "#27408b", size = 3) +
geom_line(color = "#27408b", size = 1) +
theme_light(base_size = 30) +
labs(x = "Kalenderwoche (KW)",
y = "Anzahl der Infizierten") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 0.5)) +
scale_x_discrete(breaks = x_axis[seq(1, length(x_axis), 5)])
334.000/7
334000/7
