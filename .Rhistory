mutate(datum = str_extract(value, "[0-9]{8}"),
datum = ymd(datum)) %>%
arrange(desc(datum)) %>%
pull(value) %>%
.[1] %>%
readRDS()
library(flexdashboard)
library(dplyr)
library(ggplot2)
library(lubridate)
library(emojifont)
library(leaflet)
library(readr)
library(tidyr)
library(stringr)
df_long %>%
filter(category == "students_infected") %>%
group_by(data_date) %>%
summarise(total = sum(value, na.rm = TRUE)) %>%
ggplot(aes(data_date, total, group = 1)) +
geom_line(size = 1.5) +
ggplot2::theme_light() +
theme(text = element_text(size=60))
# per country data
df_long <- list.files("data_clean/", pattern = "_clean_kpi_bl.rds", full.names = TRUE) %>%
as_tibble() %>%
mutate(datum = str_extract(value, "[0-9]{8}"),
datum = ymd(datum)) %>%
arrange(desc(datum)) %>%
pull(value) %>%
.[1] %>%
readRDS()
df_long %>%
filter(category == "students_infected") %>%
group_by(data_date) %>%
summarise(total = sum(value, na.rm = TRUE)) %>%
ggplot(aes(data_date, total, group = 1)) +
geom_line(size = 1.5) +
ggplot2::theme_light() +
theme(text = element_text(size=60))
df_long
plot_data <- df_long %>%
filter(category == "students_infected") %>%
group_by(data_date) %>%
summarise(total = sum(value, na.rm = TRUE))
plot_data
plot_data$data_date
plot_data$data_date %>% sort()
xticks <- sort(plot_data$data_date)
plot_data <- df_long %>%
filter(category == "students_infected") %>%
group_by(data_date) %>%
summarise(total = sum(value, na.rm = TRUE))
xticks <- sort(plot_data$data_date)
plot_data %>%
ggplot(aes(data_date, total, group = 1)) +
geom_line(size = 1.5) +
ggplot2::theme_light() +
theme(text = element_text(size=60))  +
scale_x_discrete(breaks = xticks[seq(1, length(xticks), 5)])
xticks[seq(1, length(xticks), 5)]
plot_data %>%
ggplot(aes(data_date, total, group = 1)) +
geom_line(size = 1.5) +
ggplot2::theme_light() +
theme(text = element_text(size=60))  +
scale_x_discrete(breaks = xticks[seq(1, length(xticks), 4)])
xticks[seq(1, length(xticks), 4)]
plot_data %>%
ggplot(aes(data_date, total, group = 1)) +
geom_line(size = 1.5) +
ggplot2::theme_light() +
theme(text = element_text(size=60))  +
scale_x_discrete(breaks = xticks[seq(1, length(xticks), 6)])
plot_data %>%
ggplot(aes(data_date, total, group = 1)) +
geom_line(size = 1.5) +
ggplot2::theme_light() +
theme(text = element_text(size=60))  +
scale_x_discrete(breaks = xticks[seq(1, length(xticks), 7)])
plot_data
df_long %>%
filter(category == "students_infected") %>%
group_by(data_date) %>%
summarise(total = sum(value, na.rm = TRUE)) %>%
mutate(woche = week(data_date))
df_long %>%
filter(category == "students_infected") %>%
mutate(woche = week(data_date))
df_long %>%
filter(category == "students_infected") %>%
mutate(woche = week(data_date)) %>%
group_by(woche) %>%
summarise(total = sum(value, na.rm = TRUE))
df_long %>%
filter(category == "students_infected") %>%
mutate(woche = week(data_date),
jahr = year(data_date))
df_long %>%
filter(category == "students_infected") %>%
mutate(woche = week(data_date),
woche = ifelse(nchar(woche) == 1, paste0("0", woche), woche),
jahr = year(data_date),
kw = paste0(jahr, "-KW", woche))
df_long %>%
filter(category == "students_infected") %>%
mutate(woche = week(data_date),
woche = ifelse(nchar(woche) == 1, paste0("0", woche), woche),
jahr = year(data_date),
kw = paste0(jahr, "-KW", woche)) %>%
group_by(kw) %>%
summarise(total = sum(value, na.rm = TRUE))
plot_data <- df_long %>%
filter(category == "students_infected") %>%
mutate(woche = week(data_date),
woche = ifelse(nchar(woche) == 1, paste0("0", woche), woche),
jahr = year(data_date),
kw = paste0(jahr, "-KW", woche)) %>%
group_by(kw) %>%
summarise(total = sum(value, na.rm = TRUE)) %>%
xticks <- sort(plot_data$data_date)
plot_data <- df_long %>%
filter(category == "students_infected") %>%
mutate(woche = week(data_date),
woche = ifelse(nchar(woche) == 1, paste0("0", woche), woche),
jahr = year(data_date),
kw = paste0(jahr, "-KW", woche)) %>%
group_by(kw) %>%
summarise(total = sum(value, na.rm = TRUE))
xticks <- sort(plot_data$data_date)
xticks
xticks <- sort(plot_data$kw)
xticks
plot_data %>%
ggplot(aes(data_date, total, group = 1)) +
geom_line(size = 1.5) +
ggplot2::theme_light() +
theme(text = element_text(size=60))  +
scale_x_discrete(breaks = xticks[seq(1, length(xticks), 7)])
plot_data %>%
ggplot(aes(kw, total, group = 1)) +
geom_line(size = 1.5) +
ggplot2::theme_light() +
theme(text = element_text(size=60))  +
scale_x_discrete(breaks = xticks[seq(1, length(xticks), 7)])
plot_verlauf <- function(cat) {
plot_data <- df_long %>%
filter(category == cat) %>%
mutate(woche = week(data_date),
woche = ifelse(nchar(woche) == 1, paste0("0", woche), woche),
jahr = year(data_date),
kw = paste0(jahr, "-KW", woche)) %>%
group_by(kw) %>%
summarise(total = sum(value, na.rm = TRUE))
xticks <- sort(plot_data$kw)
plot_data %>%
ggplot(aes(kw, total, group = 1)) +
geom_line(size = 1.5) +
ggplot2::theme_light() +
theme(text = element_text(size=60))  +
scale_x_discrete(breaks = xticks[seq(1, length(xticks), 7)]) +
labs(x = "Kalenderwoche", "Total\ninfiziert")
}
plot_verlauf("students_infected")
plot_verlauf("teacher_infected")
df_long
library(dplyr)
library(stringr)
library(lubridate)
library(tidyr)
library(leaflet)
library(leaflet.extras)
library(leafpop)
library(htmltools)
library(htmlwidgets)
kpi_kreis <- list.files(path = "data_clean/", pattern = "clean_kpi_bl", full.names = TRUE) %>%
as_tibble() %>%
rename(file = value) %>%
mutate(datum = str_extract(file, "[0-9]{8}"),
datum = ymd(datum)) %>%
arrange(desc(datum)) %>%
pull(file) %>%
.[1] %>%
readRDS()
quara <- kpi_kreis %>%
filter(year(data_date) == 2021) %>%
pivot_wider(
names_from = "category",
values_from = "value",
values_fill = 0
) %>%
separate(key, c("bl", "bl2"), remove = FALSE) %>%
select(data_date, key, bl, bl2, date, contains("quara")) %>%
mutate(students_quarantine_perc = ifelse(is.nan(students_quarantine_perc), NA, students_quarantine_perc),
teacher_quarantine_perc = ifelse(is.nan(teacher_quarantine_perc), NA, teacher_quarantine_perc),
HASC_1 = paste0("DE.", toupper(bl2)))
bl.shp <- raster::getData("GADM", country = "DEU", level = 1)
bl_tidy <- bl.shp%>%
broom::tidy(region = "CC_1")
kmk_data <- bl.shp
kmk_data@data <- bl.shp@data %>%
as_tibble() %>%
left_join(quara %>%
filter(data_date == max(data_date)),
by = "HASC_1") %>%
mutate(label = paste0(NAME_1, "\nSchüler in Quarantäne: ", round(students_quarantine_perc, 4), "%"),
label = ifelse(grepl("NA%$", label),
paste0(NAME_1, " - Schule geschlossen\noder keine Daten vorhanden"),
label),
label_teacher = paste0(NAME_1, "\nLehrkräfte in Quarantäne: ", round(teacher_quarantine_perc, 4), "%"),
label_teacher = ifelse(grepl("NA%$", label_teacher),
paste0(NAME_1, " - Schule geschlossen\noder keine Daten vorhanden"),
label_teacher))
heute_str <- gsub("-", "", Sys.Date())
saveRDS(kmk_data@data, file = paste0("data_clean/", heute_str, "_kmkdata_bl_quara.rds"))
#####################################################################################
#### students
pal <- colorNumeric(
palette = "viridis",
domain = kmk_data@data$students_quarantine_perc,
na.color = "#ffffff")
## create javascript elements for plot
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title_string_new <- paste0(
'KMK Dashboard - Infected students
</br> Stand ',
format(Sys.Date(), "%d/%m%/%Y")
)
title <- tags$div(
tag.map.title, HTML(title_string_new)
)
pall <- colorNumeric(
palette = "viridis",
domain = kmk_data$students_quarantine_perc[!is.na(kmk_data$students_quarantine_perc)]
)
kmk_students_bl_quara <- leaflet(options = leafletOptions(
zoomControl = FALSE,
minZoom = 6.2,
maxZoom = 9
)) %>%
addPolygons(
data = kmk_data,
#label = ~map(label_map, HTML),
popup = ~label,
smoothFactor = 0.000005,
opacity = 1,
fillColor = ~pal(students_quarantine_perc),
color = '#cccccc',
weight = 1,
fillOpacity = 1,
highlightOptions = highlightOptions(
color = "#D23264",
weight = 3,
stroke = 4,
bringToFront = TRUE,
sendToBack = FALSE
)
) %>%
setMapWidgetStyle(list(background= "white")) %>%
#addControl(title, position = "topleft", className="map-title") %>%
addLegend(position = "bottomright",
pal = pall,
values = kmk_data$students_quarantine_perc[!is.na(kmk_data$students_quarantine_perc)],
title = "Schüler in Quaratäne in %", na.label="")
#####################################################################################
#### teacher
pal <- colorNumeric(
palette = "viridis",
domain = kmk_data@data$teacher_quarantine_perc,
na.color = "#ffffff")
## create javascript elements for plot
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title_string_new <- paste0(
'KMK Dashboard - Infected teacher
</br> Stand ',
format(Sys.Date(), "%d/%m%/%Y")
)
title <- tags$div(
tag.map.title, HTML(title_string_new)
)
pall <- colorNumeric(
palette = "viridis",
domain = kmk_data$teacher_quarantine_perc[!is.na(kmk_data$teacher_quarantine_perc)]
)
kmk_teacher_bl_quara <- leaflet(options = leafletOptions(
zoomControl = FALSE,
minZoom = 6.2,
maxZoom = 9
)) %>%
addPolygons(
data = kmk_data,
#label = ~map(label_map, HTML),
popup = ~label_teacher,
smoothFactor = 0.000005,
opacity = 1,
fillColor = ~pal(teacher_quarantine_perc),
color = '#cccccc',
weight = 1,
fillOpacity = 1,
highlightOptions = highlightOptions(
color = "#D23264",
weight = 3,
stroke = 4,
bringToFront = TRUE,
sendToBack = FALSE
)
) %>%
setMapWidgetStyle(list(background= "white")) %>%
#addControl(title, position = "topleft", className="map-title") %>%
addLegend(position = "bottomright",
pal = pall,
values = kmk_data$teacher_quarantine_perc[!is.na(kmk_data$teacher_quarantine_perc)],
title = "Infizierte Lehrkräfte\nin %", na.label="")
save(kmk_students_bl_quara, kmk_teacher_bl_quara, file = "leaflet_maps/recent_maps_bl_quara.RData")
library(dplyr)
library(stringr)
library(lubridate)
library(tidyr)
library(leaflet)
library(leaflet.extras)
library(leafpop)
library(htmltools)
library(htmlwidgets)
kpi_kreis <- list.files(path = "data_clean/", pattern = "clean_kpi_bl", full.names = TRUE) %>%
as_tibble() %>%
rename(file = value) %>%
mutate(datum = str_extract(file, "[0-9]{8}"),
datum = ymd(datum)) %>%
arrange(desc(datum)) %>%
pull(file) %>%
.[1] %>%
readRDS()
infected <- kpi_kreis %>%
filter(year(data_date) == 2021) %>%
pivot_wider(
names_from = "category",
values_from = "value",
values_fill = 0
) %>%
separate(key, c("bl", "bl2"), remove = FALSE) %>%
mutate(students_perc = students_infected/students_total*100,
teacher_perc = teacher_infected/teacher_total*100,
HASC_1 = paste0("DE.", toupper(bl2)),
students_perc = ifelse(is.nan(students_perc), NA, students_perc),
students_perc = ifelse(is.infinite(students_perc), NA, students_perc),
teacher_perc = ifelse(is.nan(teacher_perc), NA, teacher_perc),
teacher_perc = ifelse(is.infinite(teacher_perc), NA, teacher_perc))
# landkreise.shp <- raster::getData("GADM", country = "DEU", level = 2)
# tidy_lk <- landkreise.shp %>%
#   broom::tidy(region = "CC_2")
bl.shp <- raster::getData("GADM", country = "DEU", level = 1)
bl_tidy <- bl.shp %>%
broom::tidy(region = "CC_1")
kmk_data <- bl.shp
kmk_data@data <- bl.shp@data %>%
as_tibble() %>%
left_join(infected %>%
filter(data_date == max(data_date)),
by = "HASC_1") %>%
mutate(label = paste0(NAME_1, "\nInfiziert: ", round(students_perc, 4), "%"),
label = ifelse(grepl("NA%$", label), paste0(NAME_1, " - Schule geschlossen"), label),
label_teacher = paste0(NAME_1, "\nInfiziert: ", round(teacher_perc, 4), "%"),
label_teacher = ifelse(grepl("NA%$", label_teacher), paste0(NAME_1, " - Schule geschlossen"), label_teacher))
heute_str <- gsub("-", "", Sys.Date())
saveRDS(kmk_data@data, file = paste0("data_clean/", heute_str, "_kmkdata_bl.rds"))
#### students
pal <- colorNumeric(
palette = "viridis",
domain = kmk_data@data$students_perc,
na.color = "#ffffff")
## create javascript elements for plot
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title_string_new <- paste0(
'KMK Dashboard - Infected students
</br> Stand ',
format(Sys.Date(), "%d/%m%/%Y")
)
title <- tags$div(
tag.map.title, HTML(title_string_new)
)
pall <- colorNumeric(
palette = "viridis",
domain = kmk_data$student_perc[!is.na(kmk_data$students_perc)]
)
kmk_students_bl <- leaflet(options = leafletOptions(
zoomControl = FALSE,
minZoom = 6.2,
maxZoom = 9
)) %>%
addPolygons(
data = kmk_data,
#label = ~map(label_map, HTML),
popup = ~label,
smoothFactor = 0.000005,
opacity = 1,
fillColor = ~pal(students_perc),
color = '#cccccc',
weight = 1,
fillOpacity = 1,
highlightOptions = highlightOptions(
color = "#D23264",
weight = 3,
stroke = 4,
bringToFront = TRUE,
sendToBack = FALSE
)
) %>%
setMapWidgetStyle(list(background= "white")) %>%
#addControl(title, position = "topleft", className="map-title") %>%
addLegend(position = "bottomright",
pal = pall,
values = kmk_data$students_perc[!is.na(kmk_data$students_perc)],
title = "Infizierte Schüler\nin %", na.label="")
#####################################################################################
#### teacher
pal <- colorNumeric(
palette = "viridis",
domain = kmk_data@data$teacher_perc,
na.color = "#ffffff")
## create javascript elements for plot
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title_string_new <- paste0(
'KMK Dashboard - Infected teacher
</br> Stand ',
format(Sys.Date(), "%d/%m%/%Y")
)
title <- tags$div(
tag.map.title, HTML(title_string_new)
)
pall <- colorNumeric(
palette = "viridis",
domain = kmk_data$teacher_perc[!is.na(kmk_data$teacher_perc)]
)
kmk_teacher_bl <- leaflet(options = leafletOptions(
zoomControl = FALSE,
minZoom = 6.2,
maxZoom = 9
)) %>%
addPolygons(
data = kmk_data,
#label = ~map(label_map, HTML),
popup = ~label_teacher,
smoothFactor = 0.000005,
opacity = 1,
fillColor = ~pal(teacher_perc),
color = '#cccccc',
weight = 1,
fillOpacity = 1,
highlightOptions = highlightOptions(
color = "#D23264",
weight = 3,
stroke = 4,
bringToFront = TRUE,
sendToBack = FALSE
)
) %>%
setMapWidgetStyle(list(background= "white")) %>%
#addControl(title, position = "topleft", className="map-title") %>%
addLegend(position = "bottomright",
pal = pall,
values = kmk_data$teacher_perc[!is.na(kmk_data$teacher_perc)],
title = "Infizierte Lehrkräfte\nin %", na.label="")
save(kmk_students_bl, kmk_teacher_bl, file = "leaflet_maps/recent_maps_bl.RData")
install.packages("crosstalk")
