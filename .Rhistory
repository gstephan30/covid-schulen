pal = pall,
values = kmk_data$students_perc[!is.na(kmk_data$students_perc)],
title = "% wöchentlich gemeldeter Infektionen von SchülerInnen", na.label="")
#####################################################################################
#### teacher
pal <- colorNumeric(
palette = "RdBu",
reverse = TRUE,
domain = kmk_data@data$teacher_perc,
na.color = "#ffffff")
## create javascript elements for plot
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title_string_new <- paste0(
'KMK Dashboard - Infected teacher
</br> Stand ',
format(Sys.Date(), "%d/%m%/%Y")
)
title <- tags$div(
tag.map.title, HTML(title_string_new)
)
pall <- colorNumeric(
palette = "RdBu",
reverse = TRUE,
domain = kmk_data$teacher_perc[!is.na(kmk_data$teacher_perc)]
)
kmk_teacher_bl <- leaflet(options = leafletOptions(
zoomControl = FALSE,
minZoom = 6.2,
maxZoom = 9
)) %>%
addPolygons(
data = kmk_data,
#label = ~map(label_map, HTML),
popup = ~label_teacher,
smoothFactor = 0.000005,
opacity = 1,
fillColor = ~pal(teacher_perc),
color = '#cccccc',
weight = 1,
fillOpacity = 1,
highlightOptions = highlightOptions(
color = "#D23264",
weight = 3,
stroke = 4,
bringToFront = TRUE,
sendToBack = FALSE
)
) %>%
setMapWidgetStyle(list(background= "white")) %>%
#addControl(title, position = "topleft", className="map-title") %>%
addLegend(position = "bottomright",
pal = pall,
values = kmk_data$teacher_perc[!is.na(kmk_data$teacher_perc)],
title = "% wöchentlich gemeldeter Infektionen von LehrerInnen", na.label="")
save(kmk_students_bl, kmk_teacher_bl, file = "leaflet_maps/recent_maps_bl.RData")
kmk_teacher_bl
leaflet(options = leafletOptions(
zoomControl = FALSE,
minZoom = 6.2,
maxZoom = 9
)) %>%
addPolygons(
data = kmk_data,
#label = ~map(label_map, HTML),
popup = ~label_teacher,
smoothFactor = 0.000005,
opacity = 1,
fillColor = ~pal(teacher_perc),
color = '#cccccc',
weight = 1,
fillOpacity = 1,
highlightOptions = highlightOptions(
color = "#D23264",
weight = 3,
stroke = 4,
bringToFront = TRUE,
sendToBack = FALSE
)
) %>%
setMapWidgetStyle(list(background= "white")) %>%
#addControl(title, position = "topleft", className="map-title") %>%
addLegend(position = "bottomright",
pal = pall,
values = kmk_data$teacher_perc[!is.na(kmk_data$teacher_perc)],
title = "% wöchentlich gemeldeter\nInfektionen von LehrerInnen", na.label="")
leaflet(options = leafletOptions(
zoomControl = FALSE,
minZoom = 6.2,
maxZoom = 9
)) %>%
addPolygons(
data = kmk_data,
#label = ~map(label_map, HTML),
popup = ~label_teacher,
smoothFactor = 0.000005,
opacity = 1,
fillColor = ~pal(teacher_perc),
color = '#cccccc',
weight = 1,
fillOpacity = 1,
highlightOptions = highlightOptions(
color = "#D23264",
weight = 3,
stroke = 4,
bringToFront = TRUE,
sendToBack = FALSE
)
) %>%
setMapWidgetStyle(list(background= "white")) %>%
#addControl(title, position = "topleft", className="map-title") %>%
addLegend(position = "bottomright",
pal = pall,
values = kmk_data$teacher_perc[!is.na(kmk_data$teacher_perc)],
title = "% wöchentlich gemeldeter<br>Infektionen von LehrerInnen", na.label="")
library(dplyr)
library(stringr)
library(lubridate)
library(tidyr)
library(leaflet)
library(leaflet.extras)
library(leafpop)
library(htmltools)
library(htmlwidgets)
kpi_kreis <- list.files(path = "data_clean/", pattern = "clean_kpi_bl", full.names = TRUE) %>%
as_tibble() %>%
rename(file = value) %>%
mutate(datum = str_extract(file, "[0-9]{8}"),
datum = ymd(datum)) %>%
arrange(desc(datum)) %>%
pull(file) %>%
.[1] %>%
readRDS()
infected <- kpi_kreis %>%
filter(year(data_date) == 2021) %>%
pivot_wider(
names_from = "category",
values_from = "value",
values_fill = 0
) %>%
separate(key, c("bl", "bl2"), remove = FALSE) %>%
mutate(students_perc = students_infected/students_total*100,
teacher_perc = teacher_infected/teacher_total*100,
HASC_1 = paste0("DE.", toupper(bl2)),
students_perc = ifelse(is.nan(students_perc), NA, students_perc),
students_perc = ifelse(is.infinite(students_perc), NA, students_perc),
teacher_perc = ifelse(is.nan(teacher_perc), NA, teacher_perc),
teacher_perc = ifelse(is.infinite(teacher_perc), NA, teacher_perc))
# landkreise.shp <- raster::getData("GADM", country = "DEU", level = 2)
# tidy_lk <- landkreise.shp %>%
#   broom::tidy(region = "CC_2")
bl.shp <- raster::getData("GADM", country = "DEU", level = 1)
bl_tidy <- bl.shp %>%
broom::tidy(region = "CC_1")
kmk_data <- bl.shp
kmk_data@data <- bl.shp@data %>%
as_tibble() %>%
left_join(infected %>%
filter(data_date == max(data_date)) %>%
mutate(HASC_1 = str_replace_all(HASC_1, "DE.BB", "DE.BR")),
by = "HASC_1") %>%
mutate(label = paste0(NAME_1, "\nInfiziert: ", round(students_perc, 4), "%"),
label = ifelse(grepl("NA%$", label), paste0(NAME_1, " - Schule geschlossen"), label),
label_teacher = paste0(NAME_1, "\nInfiziert: ", round(teacher_perc, 4), "%"),
label_teacher = ifelse(grepl("NA%$", label_teacher), paste0(NAME_1, " - Schule geschlossen"), label_teacher))
heute_str <- gsub("-", "", Sys.Date())
saveRDS(kmk_data@data, file = paste0("data_clean/", heute_str, "_kmkdata_bl.rds"))
#### students
pal <- colorNumeric(
palette = "RdBu",
reverse = TRUE,
domain = kmk_data@data$students_perc,
na.color = "#ffffff")
## create javascript elements for plot
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title_string_new <- paste0(
'KMK Dashboard - Infected students
</br> Stand ',
format(Sys.Date(), "%d/%m%/%Y")
)
title <- tags$div(
tag.map.title, HTML(title_string_new)
)
pall <- colorNumeric(
palette = "RdBu",
reverse = TRUE,
domain = kmk_data$student_perc[!is.na(kmk_data$students_perc)]
)
kmk_students_bl <- leaflet(options = leafletOptions(
zoomControl = FALSE,
minZoom = 6.2,
maxZoom = 9
)) %>%
addPolygons(
data = kmk_data,
#label = ~map(label_map, HTML),
popup = ~label,
smoothFactor = 0.000005,
opacity = 1,
fillColor = ~pal(students_perc),
color = '#cccccc',
weight = 1,
fillOpacity = 1,
highlightOptions = highlightOptions(
color = "#D23264",
weight = 3,
stroke = 4,
bringToFront = TRUE,
sendToBack = FALSE
)
) %>%
setMapWidgetStyle(list(background= "white")) %>%
#addControl(title, position = "topleft", className="map-title") %>%
addLegend(position = "bottomright",
pal = pall,
values = kmk_data$students_perc[!is.na(kmk_data$students_perc)],
title = "% wöchentlich gemeldeter<br>Infektionen von SchülerInnen", na.label="")
#####################################################################################
#### teacher
pal <- colorNumeric(
palette = "RdBu",
reverse = TRUE,
domain = kmk_data@data$teacher_perc,
na.color = "#ffffff")
## create javascript elements for plot
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title_string_new <- paste0(
'KMK Dashboard - Infected teacher
</br> Stand ',
format(Sys.Date(), "%d/%m%/%Y")
)
title <- tags$div(
tag.map.title, HTML(title_string_new)
)
pall <- colorNumeric(
palette = "RdBu",
reverse = TRUE,
domain = kmk_data$teacher_perc[!is.na(kmk_data$teacher_perc)]
)
kmk_teacher_bl <- leaflet(options = leafletOptions(
zoomControl = FALSE,
minZoom = 6.2,
maxZoom = 9
)) %>%
addPolygons(
data = kmk_data,
#label = ~map(label_map, HTML),
popup = ~label_teacher,
smoothFactor = 0.000005,
opacity = 1,
fillColor = ~pal(teacher_perc),
color = '#cccccc',
weight = 1,
fillOpacity = 1,
highlightOptions = highlightOptions(
color = "#D23264",
weight = 3,
stroke = 4,
bringToFront = TRUE,
sendToBack = FALSE
)
) %>%
setMapWidgetStyle(list(background= "white")) %>%
#addControl(title, position = "topleft", className="map-title") %>%
addLegend(position = "bottomright",
pal = pall,
values = kmk_data$teacher_perc[!is.na(kmk_data$teacher_perc)],
title = "% wöchentlich gemeldeter<br>Infektionen von LehrerInnen", na.label="")
save(kmk_students_bl, kmk_teacher_bl, file = "leaflet_maps/recent_maps_bl.RData")
library(dplyr)
library(stringr)
library(readxl)
library(tidyr)
#library(purrr)
# download new data
source("R/kmk_scrap.R")
scrap_kmk()
dat_final<-read.csv(file="S:/PROJACTIVE/MUSPAD-LABORERGEBNISSE/export_review/data sets/8counties_data_210906.csv")
dat_final<-read.csv(file="S:/PROJACTIVE/MUSPAD-LABORERGEBNISSE/export_review/data sets/7counties_data_210906.csv")
dat_final<-read.csv(file="S:/PROJACTIVE/MUSPAD-LABORERGEBNISSE/export_review/data sets/7counties paper/8counties_data_210906.csv")
dat_final$weights
rep(NA,nrow(dat_final))
dat_final
library(dplyr)
dat_final
dat_final %>%
as_tibble()
which(dat_final$sex=="Diverse")
dat_final
dat_final %>%
as_tibble()
dat_final %>%
as_tibble() %>%
filter(sex == "Diverse")
dat_final %>%
as_tibble() %>%
filter(sex != "Diverse")
unique(dat_final$standort)
unique(dat_final$age_group)
#now set the weights correctly
all_standorts<-unique(dat_final$standort)
all_ages<-unique(dat_final$age_group)
for(i in 1: length(all_standorts)){
for(j in 1: length(all_ages)){
wh<-which(dat_final$standort==all_standorts[i] &
dat_final$stage==1 &
dat_final$sex=="Male" &
dat_final$age_group==all_ages[j])
whcol<-c(which(startsWith(colnames(pop),all_standorts[i]) & endsWith(colnames(pop),"M")),
which(startsWith(colnames(pop),all_standorts[i]) & endsWith(colnames(pop),"F")))
ni<-length(wh)
n<-sum(dat_final$standort==all_standorts[i] &
dat_final$stage==1 )
dat_final$weights[wh]<-pop[all_ages[j],whcol[1]]*n/ni/sum(pop[,whcol])
wh<-which(dat_final$standort==all_standorts[i] &
dat_final$stage==1 &
dat_final$sex=="Female" &
dat_final$age_group==all_ages[j])
ni<-length(wh)
dat_final$weights[wh]<-pop[all_ages[j],whcol[2]]*n/ni/sum(pop[,whcol])
if (any(dat_final$standort==all_standorts[i] & dat_final$stage==2)){
wh<-which(dat_final$standort==all_standorts[i] &
dat_final$stage==2 &
dat_final$sex=="Male" &
dat_final$age_group==all_ages[j])
whcol<-c(which(startsWith(colnames(pop),all_standorts[i]) & endsWith(colnames(pop),"M")),
which(startsWith(colnames(pop),all_standorts[i]) & endsWith(colnames(pop),"F")))
ni<-length(wh)
n<-sum(dat_final$standort==all_standorts[i] &
dat_final$stage==2)
dat_final$weights[wh]<-pop[all_ages[j],whcol[1]]*n/ni/sum(pop[,whcol])
wh<-which(dat_final$standort==all_standorts[i] &
dat_final$stage==2 &
dat_final$sex=="Female" &
dat_final$age_group==all_ages[j])
ni<-length(wh)
dat_final$weights[wh]<-pop[all_ages[j],whcol[2]]*n/ni/sum(pop[,whcol])
}
}
}
getwd()
library(flexdashboard)
library(dplyr)
library(ggplot2)
library(lubridate)
library(emojifont)
library(leaflet)
library(readr)
library(tidyr)
library(stringr)
library(forcats)
load("leaflet_maps/recent_maps_bl.RData")
load("leaflet_maps/gall_bl.RData")
load("leaflet_maps/recent_maps_bl_quara.RData")
load("data_clean/current_tabs.RData")
load("leaflet_maps/forecast.RData")
kmk_students_bl
plot_verlauf <- function(cat) {
plot_data <- df_long %>%
filter(category == cat,
data_date > ymd(20210101)) %>%
mutate(
woche = week(data_date),
woche = ifelse(nchar(woche) == 1, paste0("0", woche), woche),
jahr = year(data_date),
kw = paste0(jahr, "-KW", woche)
) %>%
group_by(kw) %>%
summarise(total = sum(value, na.rm = TRUE))
xticks <- sort(plot_data$kw)
plot_data %>%
ggplot(aes(kw, total, group = 1)) +
geom_col(fill = "#152238") +
ggplot2::theme_light() +
theme(text = element_text(size = 60))  +
scale_x_discrete(breaks = xticks[seq(1, length(xticks), 7)]) +
labs(x = "Kalenderwoche", y = "Total infiziert")
}
plot_verlauf("students_infected")
# per country data
df_long <- list.files("data_clean/", pattern = "_clean_kpi_bl.rds", full.names = TRUE) %>%
as_tibble() %>%
mutate(datum = str_extract(value, "[0-9]{8}"),
datum = ymd(datum)) %>%
arrange(desc(datum)) %>%
pull(value) %>%
.[1] %>%
readRDS()
# clean kpi data
recent_kmkdata_file <- list.files("data_clean/", pattern = "kmkdata.rds", full.names = TRUE) %>%
as_tibble() %>%
mutate(datum = str_extract(value, "[0-9]{8}"),
datum = ymd(datum)) %>%
arrange(desc(datum)) %>%
pull(value) %>%
.[1] %>%
readRDS()
plot_verlauf <- function(cat) {
plot_data <- df_long %>%
filter(category == cat,
data_date > ymd(20210101)) %>%
mutate(
woche = week(data_date),
woche = ifelse(nchar(woche) == 1, paste0("0", woche), woche),
jahr = year(data_date),
kw = paste0(jahr, "-KW", woche)
) %>%
group_by(kw) %>%
summarise(total = sum(value, na.rm = TRUE))
xticks <- sort(plot_data$kw)
plot_data %>%
ggplot(aes(kw, total, group = 1)) +
geom_col(fill = "#152238") +
ggplot2::theme_light() +
theme(text = element_text(size = 60))  +
scale_x_discrete(breaks = xticks[seq(1, length(xticks), 7)]) +
labs(x = "Kalenderwoche", y = "Total infiziert")
}
plot_verlauf("students_infected")
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
library(ggplot2)
bl_data <- list.files("data_clean/", pattern =  "_clean_kpi_bl.rds", full.names = TRUE) %>%
as_tibble() %>%
rename(file = value) %>%
mutate(datum = str_extract(file, "[0-9]{8}"),
datum = ymd(datum)) %>%
arrange(desc(datum)) %>%
pull(file) %>%
.[1] %>%
readRDS() %>%
filter(year(data_date) > 2020) %>%
pivot_wider(
names_from = category,
values_from = value
) %>%
mutate(students_perc = students_infected/students_total*100,
teacher_perc = teacher_infected/teacher_total*100)
bl_data %>%
mutate(date = as.Date(date, origin = "1900-01-01")) %>% readr::write_excel_csv2("kmk_bl-20211018.csv")
bl.shp <- raster::getData("GADM", country = "DEU", level = 1)
bl_tidy <- bl.shp %>%
broom::tidy(region = "CC_1")
shape_data <- bl.shp@data %>%
as_tibble() %>%
select(CC_1, key = HASC_1, NAME_1) %>%
left_join(
bl_data %>%
mutate(key = str_replace(key, "bl_", "DE."),
key = str_to_upper(key),
key = str_replace_all(key, "DE.BB", "DE.BR")) %>%
filter(grepl("DE.", key))
) %>%
mutate(date = as.Date(date, origin = "1899-01-01"))
perc_nan <- shape_data$students_perc[!is.nan(shape_data$students_perc)]
perc_inf <- perc_nan[!is.infinite(perc_nan)]
perc_na <- perc_inf[!is.na(perc_inf)]
g_bl_all <- ggplot() +
geom_polygon(
data = bl_tidy %>%
left_join(shape_data, by = c("id" = "CC_1")),
aes(long, lat, group = group, fill = students_perc),
color = "black") +
coord_quickmap() +
theme_void() +
facet_wrap(~data_date, nrow = 3) +
labs(fill = "Infizierte in %",
title = "Infizierte Schüler in Deutschland",
subtitle = "Datenquelle @KWK") +
theme(legend.position = "bottom",
plot.margin = grid::unit(c(0, 0, 0, 0), "mm")) +
scale_fill_gradient2(low = "#053061", high = "#67001f", mid = "#f7f7f7",
midpoint = max(perc_na)/2)
g_bl_all
save(g_bl_all, file = "leaflet_maps/gall_bl.RData")
